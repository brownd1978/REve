#!/usr/bin/env python
#
# Original author Rob Kutschke.
#

import os, re
Import('env')
Import('mu2e_helper')

helper=mu2e_helper(env)

# Transform the UPS root version into pure numerical form
# The 4 fields are:
#   major version number
#   minor version number
#   patch number
#   letter
# The numerical form is:
# major*(100**3) + minor*(100**2) + patch*(100) + letter.
# where letter = 0 if no letter is present, 1 for a, 2 for b etc
#
# The alogirthm assumes:
#  - major and minor version numbers one or two decimal digits, leading zeros optional
#  - patch number must be 2 digits and requires a leading zero
#  - letter is a single lowercase letter
#
root_version = os.environ['ROOT_VERSION']
#root_version = os.environ['FOO_VERSION']
tmp=root_version.replace('v','')
x=tmp.split('_')
major=x[0]
minor=x[1]
patch=x[2][0:2]
iletter=0

if len(x[2]) == 3:
  letter=x[2][2]
  iletter=ord(letter)-ord('a')+1

elif len(x[2]) == 2:
  iletter=0

else:
  print ( 'Aborting building in Mu2eEventDisplay/src/SConscript' )
  print ( 'Cannot parse ROOT_VERSION: ', root_version )
  print ( 'Patch field must be 2 or 3 characters long' )
  Exit(2)

root_v=int(major)*1000000+int(minor)*10000+int(patch)*100+int(iletter)

numeric_root_version='-DNUMERIC_ROOT_VERSION='+str(root_v)
# end of transformation of ROOT_VERSION

babarlibs = env['BABARLIBS']
rootlibs = env['ROOTLIBS']
extrarootlibs = [ 'Geom', 'Geom', 'GeomPainter', 'Ged', 'Graf3d', 'Eve','EG', 'RGL','Gui', 'Gdml' , 'Core', 'Rint', 'ROOTEve','ROOTWebDisplay']

userlibs = [ rootlibs,
             extrarootlibs,
             babarlibs,
            'mu2e_DataProducts',
            'mu2e_Mu2eBTrk',
            'mu2e_TrkReco',
            'mu2e_BTrkData',
            'mu2e_Mu2eUtilities',
            'mu2e_MCDataProducts',
            'mu2e_RecoDataProducts',
            'mu2e_GlobalConstantsService_GlobalConstantsService_service',
            'mu2e_GlobalConstantsService',
            'mu2e_GeometryService',
            'mu2e_ConditionsService',
            'mu2e_CalorimeterGeom',
            'mu2e_TrackerGeom',
            'mu2e_CosmicRayShieldGeom',
            'mu2e_GeomPrimitives',
            'mu2e_ConfigTools',
            'mu2e_GeneralUtilities',
            'art_Framework_Core',
            'art_Framework_Principal',
            'art_Framework_Services_Registry',
            'art_root_io_tfile_support',
            'art_root_io_TFileService',
            'art_Framework_Services_Optional_RandomNumberGenerator_service',
            'art_Persistency_Common',
            'art_Persistency_Provenance',
            'art_Utilities',
            'canvas',
            'MF_MessageLogger',
            'fhiclcpp',
            'fhiclcpp_types',
            'tbb',
            'cetlib',
            'cetlib_except',
            'KinKal_General',
            'KinKal_Trajectory',
            'CLHEP',
            'Core',
            'boost_filesystem',
            'boost_system',
            'pthread'
			  ]


# when using ClassDef, tell the build to include the
# dictionary in the mainlib
helper.classDef(True)

helper.make_dict_and_map()

mainlib = helper.make_mainlib([userlibs], [ numeric_root_version ],)

# helper.make_plugins( [ 'mu2e_REveEventDisplay',userlibs ] )
# Fixme: split into link lists for each module.
helper.make_plugins( [
    mainlib,
    'art_Framework_Core',
    'art_Framework_Principal',
    'art_Framework_Services_Registry',
    'art_Utilities',
    'art_Persistency_Provenance',
    'art_root_io_TFileService',
    'art_root_io_tfile_support',
    'cetlib',
    'cetlib_except',
    'fhiclcpp',
    'fhiclcpp_types',
    'tbb',
    'canvas',
     rootlibs,
     extrarootlibs,
    'boost_filesystem',
    'mu2e_DataProducts',
    'mu2e_RecoDataProducts',
    'mu2e_Mu2eUtilities',
    'mu2e_BFieldGeom',
    'mu2e_TrkDiag',
    'KinKal_Trajectory',
    'pthread'
    ],
     [],
     [ numeric_root_version ],
 )

# Fixme: do I need all of babarlibs below?
helper.make_dict_and_map( [
        mainlib,
        'Core'
    ] )




# This tells emacs to view this file in python mode.
# Local Variables:
# mode:python
# End:
